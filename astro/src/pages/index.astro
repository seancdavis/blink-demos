---
import { getStore } from '@netlify/blobs';
import BaseLayout from '../layouts/BaseLayout.astro';
import NewPostForm from '../components/NewPostForm.astro';
import PostCard from '../components/PostCard.astro';
import { getPostsIndex } from '../utils/posts-index.ts';
import { Post, User } from '../utils/types.ts';

// Get page from URL params
const url = new URL(Astro.request.url);
const pageParam = url.searchParams.get('page');
const currentPage = pageParam ? parseInt(pageParam, 10) : 1;
const postsPerPage = 12;

// Get posts using the same logic as PostsIsland
const skip = (currentPage - 1) * postsPerPage;
const postsIndex = await getPostsIndex();
const postEntries = postsIndex.slice(skip, skip + postsPerPage);
const totalPosts = postsIndex.length;
const totalPages = Math.ceil(totalPosts / postsPerPage);

// Get post and user data
const postStore = getStore({ name: 'Post', consistency: 'strong' });
const userStore = getStore({ name: 'User', consistency: 'strong' });

// Parallelize all database queries
const postPromises = postEntries.map(async (postEntry) => {
  try {
    const postData = await postStore.get(postEntry.id, { type: 'json' });
    if (!postData) return null;
    return { postEntry, post: postData as Post };
  } catch (error) {
    console.error(`Failed to load post ${postEntry.id}:`, error);
    return null;
  }
});

const postResults = await Promise.all(postPromises);
const validPosts = postResults.filter(Boolean) as { postEntry: any, post: Post }[];

// Get unique user IDs to avoid duplicate user fetches
const uniqueUserIds = [...new Set(validPosts.map(p => p.post.userId))];

// Parallelize user queries
const userPromises = uniqueUserIds.map(async (userId) => {
  try {
    const userData = await userStore.get(userId, { type: 'json' });
    return userData ? { userId, user: userData as User } : null;
  } catch (error) {
    console.error(`Failed to load user ${userId}:`, error);
    return null;
  }
});

const userResults = await Promise.all(userPromises);
const userMap = new Map<string, User>();
userResults.filter(Boolean).forEach(result => {
  if (result) userMap.set(result.userId, result.user);
});

// Combine posts with user data
const posts: (Post & { user: User })[] = validPosts
  .map(({ post }) => {
    const user = userMap.get(post.userId);
    return user ? { ...post, user } : null;
  })
  .filter(Boolean) as (Post & { user: User })[];
---

<BaseLayout title="Feed">
  <NewPostForm />

  <div class="container">
    <h1>Latest posts</h1>
    <div class="post-card-grid">
      {posts.length > 0 ? (
        posts.map(post => (
          <PostCard post={post} />
        ))
      ) : (
        <p>No posts available.</p>
      )}
    </div>

    {totalPages > 1 && (
      <div class="pagination">
        <nav aria-label="Posts pagination">
          {currentPage > 1 && (
            <a href={`/?page=${currentPage - 1}`} class="pagination-link">← Previous</a>
          )}
          
          <span class="pagination-info">
            Page {currentPage} of {totalPages}
          </span>
          
          {currentPage < totalPages && (
            <a href={`/?page=${currentPage + 1}`} class="pagination-link">Next →</a>
          )}
        </nav>
      </div>
    )}
  </div>
</BaseLayout>